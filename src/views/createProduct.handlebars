<h1>Welcome premium user {{user.first_name}} {{user.last_name}}!</h1>

<form method="post" id="form">
    
    <label for="title">Title:</label>
    <input type="text" name="title" id="title" required></br>

    <label for="description">Description:</label>
    <input type="text" name="description" id="description" required></br>

    <label for="price">Price:</label>
    <input type="number" name="price" id="price" required></br>

    <label for="stock">Stock:</label>
    <input type="number" name="stock" id="stock" required></br>

    <label for="thumbnail">Thumbnail:</label>
    <input type="text" name="thumbnail" id="thumbnail"></br>

    <label for="code">Code:</label>
    <input type="text" name="code" id="code" required></br>

    <button type="submit" onclick="addProductToDatabase()">Send data</button> 

</form>

    <h1>Your products!</h1>
    <div class="d-flex flex-row flex-wrap justify-content-center" id="allProducts">
        {{#if totalProducts}}
            {{#each this.totalProducts}}
                <div class="bg-light card m-2" style="width: 16rem;">
                    <img src="{{thumbnail}}" class="card-img-top p-3" width="254px" height="254px" alt="{{title}}">
                    <div class="card-body text-dark">
                        <h5 class="card-title">{{title}}</h5>
                        <p class="card-text">{{description}}</p>
                        <p class="card-text">Total stock:{{stock}}</p>
                        <button onclick="deleteProduct('{{_id}}')" class="btn btn-danger">Delete product</button>
                    </div>
                </div>
            {{/each}}
        {{/if}}
    </div>

<script src="http://localhost:8080/socket.io/socket.io.js"></script>
<script>
    const socket = io()
    const allProducts = document.getElementById('allProducts')
    async function deleteProduct(id){
        const fetchDelete = await fetch(`/api/products/delete/${id}`, {method: "DELETE"})
        const response = await fetchDelete.json()
        if(response.status === 'success'){
            //Reutilizo el newPremiumProducts para recargar los productos cuando se elimimen
            socket.emit('newPremiumProducts', response.payload.owner)
            socket.on('reloadPremiumProducts', async prods =>{
            let html = ''
            prods.forEach(prod =>{
                html += 
                `
                    <div class="bg-light card m-2" style="width: 16rem;">
                        <img src="${prod.thumbnail}" class="card-img-top p-3" width="254px" height="254px" alt="${prod.title}">
                        <div class="card-body text-dark">
                            <h5 class="card-title">${prod.title}</h5>
                            <p class="card-text">${prod.description}</p>
                            <p class="card-text">Total stock:${prod.stock}</p>
                            <button onclick="deleteProduct('${prod._id}')" class="btn btn-danger">Delete product</button>
                        </div>
                    </div>
                `
                })
                allProducts.innerHTML = html
            })
            return Swal.fire({
                title: "Product deleted successfully!",
                icon: 'success',
                text: "The product has been deleted successfully!",
                confirmButtonText: "Okay",
                timer: 2000
            })
        }else{
            return Swal.fire({
                title: "Error while deleting the product!",
                icon: 'error',
                text: "Something unexpected happened while deleting the product",
                confirmButtonText: "Okay",
                timer: 2000
            })
        }
        console.log(response)
    }
    async function addProductToDatabase(){

        const title = document.getElementById('title').value
        const description = document.getElementById('description').value
        const price = parseInt(document.getElementById('price').value)
        const stock = parseInt(document.getElementById('stock').value)
        const thumbnail = document.getElementById('thumbnail').value
        const code = document.getElementById('code').value
        const status = true
        const newProd = {title, description, price, stock, thumbnail, code, status}
        document.getElementById('form').onsubmit = e =>{
            e.preventDefault()
            document.getElementById('form').reset()
        }
        const response = await fetch(`/api/products`, {
            method: "POST",
            headers:{
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(newProd)
        })
        const result = await response.json()
        if(result.status == 'success'){
            socket.emit('newPremiumProducts', result.payload.owner)
            socket.on('reloadPremiumProducts', async prods =>{
                let html = ''
                prods.forEach(prod =>{
                    html += 
                    `
                        <div class="bg-light card m-2" style="width: 16rem;">
                            <img src="${prod.thumbnail}" class="card-img-top p-3" width="254px" height="254px" alt="${prod.title}">
                            <div class="card-body text-dark">
                                <h5 class="card-title">${prod.title}</h5>
                                <p class="card-text">${prod.description}</p>
                                <p class="card-text">Total stock:${prod.stock}</p>
                                <button onclick="deleteProduct('${prod._id}')" class="btn btn-danger">Delete product</button>
                            </div>
                        </div>
                    `
                })
                allProducts.innerHTML = html
            })
            return Swal.fire({
                title: 'Product created successfully!',
                icon: 'success',
                description: 'Your product was created!',
                confirmButtonText: 'Ok',
                timer: 2000
            })
        }else{
            return Swal.fire({
                title: 'Error while creating the product!',
                icon: 'error',
                description: 'Your product was not created!',
                confirmButtonText: 'Ok',
                timer: 2000
            })
        }   
    }
</script>
